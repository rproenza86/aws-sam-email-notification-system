AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
    emailBounceService:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-emailBounceService
            Description: !Sub
                - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
                - ResourceName: emailBounceService
            CodeUri: src/emailBounceService
            Handler: index.handler
            Runtime: nodejs12.x
            MemorySize: 3008
            Timeout: 30
            Tracing: Active
            Policies:
                - AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                      TableName: !Ref emails
            Events:
                bounce:
                    Type: SNS
                    Properties:
                        Topic: !Ref bounce
            Environment:
                Variables:
                    TABLE_NAME: !Ref emails
                    TABLE_ARN: !GetAtt emails.Arn
        Metadata:
            RuntimeOption: typescript
    emailComplaintService:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-emailComplaintService
            Description: !Sub
                - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
                - ResourceName: emailComplaintService
            CodeUri: src/emailComplaintService
            Handler: index.handler
            Runtime: nodejs12.x
            MemorySize: 3008
            Timeout: 30
            Tracing: Active
            Policies:
                - AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                      TableName: !Ref emails
            Events:
                complaint:
                    Type: SNS
                    Properties:
                        Topic: !Ref complaint
            Environment:
                Variables:
                    TABLE_NAME: !Ref emails
                    TABLE_ARN: !GetAtt emails.Arn
        Metadata:
            RuntimeOption: typescript
    bounce:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: !Sub ${AWS::StackName}-bounce
    complaint:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: !Sub ${AWS::StackName}-complaint
    notificationsService:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-notificationsService
            Description: !Sub
                - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
                - ResourceName: notificationsService
            CodeUri: src/notificationsService
            Handler: index.handler
            Runtime: nodejs12.x
            MemorySize: 3008
            Timeout: 30
            Tracing: Active
            Policies:
                - AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                      TableName: !Ref notificationsMessages
                - LambdaInvokePolicy:
                      FunctionName: !Ref sendEmailService
            Environment:
                Variables:
                    TABLE_NAME: !Ref notificationsMessages
                    TABLE_ARN: !GetAtt notificationsMessages.Arn
                    FUNCTION_NAME: !Ref sendEmailService
                    FUNCTION_ARN: !GetAtt sendEmailService.Arn
                    API_URL: !Sub https://${authServiceApi}.execute-api.${AWS::Region}.amazonaws.com/${authServiceApi.Stage}/emailsAuth
            Events:
                notificationsQueue:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt notificationsQueue.Arn
                        BatchSize: 1
    notificationsMessages:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            BillingMode: PAY_PER_REQUEST
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            TableName: !Sub ${AWS::StackName}-notificationsMessages
    emails:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            BillingMode: PAY_PER_REQUEST
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            TableName: !Sub ${AWS::StackName}-emails
    sendEmailService:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-sendEmailService
            Description: !Sub
                - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
                - ResourceName: sendEmailService
            CodeUri: src/sendEmailService
            Handler: index.handler
            Runtime: nodejs12.x
            MemorySize: 3008
            Timeout: 30
            Tracing: Active
            Policies:
                - AWSXrayWriteOnlyAccess
                - DynamoDBCrudPolicy:
                      TableName: !Ref emails
            Environment:
                Variables:
                    TABLE_NAME: !Ref emails
                    TABLE_ARN: !GetAtt emails.Arn
        Metadata:
            RuntimeOption: typescript
    authServiceApi:
        Type: AWS::Serverless::Api
        Properties:
            Name: !Sub
                - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
                - ResourceName: authServiceApi
            StageName: !Ref EnvironmentAPIGatewayStageName
            DefinitionBody:
                swagger: '2.0'
                info: {}
                paths:
                    /keys/triggerExpiration:
                        post:
                            x-amazon-apigateway-integration:
                                httpMethod: POST
                                type: aws_proxy
                                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${expirationKeyService.Arn}/invocations
                            responses: {}
                    /emailsAuth:
                        get:
                            x-amazon-apigateway-integration:
                                httpMethod: POST
                                type: aws_proxy
                                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authService.Arn}/invocations
                            responses: {}
            EndpointConfiguration: REGIONAL
            TracingEnabled: true
            Cors:
                AllowHeaders: "'Authorization,Content-Type'"
                AllowOrigin: "'*'"
    expirationKeyService:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-expirationKeyService
            Description: !Sub
                - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
                - ResourceName: expirationKeyService
            CodeUri: src/expirationKeyService
            Handler: index.handler
            Runtime: nodejs12.x
            MemorySize: 3008
            Timeout: 30
            Tracing: Active
            Policies:
                - AWSXrayWriteOnlyAccess
                - SQSSendMessagePolicy:
                      QueueName: !GetAtt notificationsQueue.QueueName
            Environment:
                Variables:
                    QUEUE_NAME: !GetAtt notificationsQueue.QueueName
                    QUEUE_ARN: !GetAtt notificationsQueue.Arn
                    QUEUE_URL: !Ref notificationsQueue
            Events:
                authServiceApiPOSTkeystriggerExpiration:
                    Type: Api
                    Properties:
                        Path: /keys/triggerExpiration
                        Method: POST
                        RestApiId: !Ref authServiceApi
        Metadata:
            RuntimeOption: typescript
    notificationsQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${AWS::StackName}-notificationsQueue
    authService:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${AWS::StackName}-authService
            Description: !Sub
                - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
                - ResourceName: authService
            CodeUri: src/authService
            Handler: index.handler
            Runtime: nodejs12.x
            MemorySize: 3008
            Timeout: 30
            Tracing: Active
            Policies:
                - AWSXrayWriteOnlyAccess
            Events:
                authServiceApiGETemailsAuth:
                    Type: Api
                    Properties:
                        Path: /emailsAuth
                        Method: GET
                        RestApiId: !Ref authServiceApi
        Metadata:
            RuntimeOption: typescript
Parameters:
    StackTagName:
        Type: String
        Description: Stack Name (injected by Stackery at deployment time)
    EnvironmentTagName:
        Type: String
        Description: Environment Name (injected by Stackery at deployment time)
    EnvironmentAPIGatewayStageName:
        Type: String
        Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
